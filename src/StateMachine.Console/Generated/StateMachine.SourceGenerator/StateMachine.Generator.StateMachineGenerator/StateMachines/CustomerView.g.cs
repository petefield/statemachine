//Autogenerated 27
namespace CustomerStateManagement.Domain.Customer;
public partial class CustomerView : IStateMachine<CustomerState> 
{
	private List<ITransition<CustomerView, CustomerState>> Transitions => [
		 new Transition<DetailsProvided, CustomerView, CustomerState>(CustomerState.Suspect, CustomerState.Applicant, null, ""),
		 new Transition<RiskCheckPassed, CustomerView, CustomerState>(CustomerState.Applicant, CustomerState.Verified, null, ""),
		 new Transition<SimplfiedCheckDone, CustomerView, CustomerState>(CustomerState.Applicant, CustomerState.Known, null, ""),
		 new Transition<ApplicationFraudDetected, CustomerView, CustomerState>(CustomerState.Applicant, CustomerState.Blacklisted, null, ""),
		 new Transition<AccountOpened, CustomerView, CustomerState>(CustomerState.Verified, CustomerState.Customer, null, ""),
		 new Transition<AccountOpened, CustomerView, CustomerState>(CustomerState.Customer, CustomerState.Customer, null, ""),
		 new Transition<AccountClosed, CustomerView, CustomerState>(CustomerState.Customer, CustomerState.Former, (subject, evt) =>  subject.AccountsHeld == 0, "subject.AccountsHeld == 0"),
		 new Transition<AccountClosed, CustomerView, CustomerState>(CustomerState.Customer, CustomerState.Customer, (subject, evt) =>  subject.AccountsHeld != 0, "subject.AccountsHeld != 0"),
		 new Transition<InvestigationStarted, CustomerView, CustomerState>(CustomerState.Customer, CustomerState.UnderInvestigation, null, ""),
		 new Transition<InvestigationCompleted, CustomerView, CustomerState>(CustomerState.UnderInvestigation, CustomerState.Customer, (subject, evt) =>  evt.Outcome == true, "evt.Outcome == true"),
		 new Transition<InvestigationCompleted, CustomerView, CustomerState>(CustomerState.UnderInvestigation, CustomerState.Blacklisted, (subject, evt) =>  evt.Outcome == false, "evt.Outcome == false"),
		 new Transition<DeathReported, CustomerView, CustomerState>(CustomerState.Customer, CustomerState.ReportedDeceased, null, ""),
		 new Transition<DeathConfirmed, CustomerView, CustomerState>(CustomerState.ReportedDeceased, CustomerState.Deceased, null, ""),
		 new Transition<DeathReportedFalse, CustomerView, CustomerState>(CustomerState.ReportedDeceased, CustomerState.Customer, null, ""),
		 new Transition<AccountOpened, CustomerView, CustomerState>(CustomerState.Former, CustomerState.Customer, null, ""),
		 new Transition<RightToBeForgotten, CustomerView, CustomerState>(CustomerState.Former, CustomerState.Forgotten, null, ""),
	];
	public void UpdateState(IStateChangeEvent evt)
	{
		this.State = GetNextState(this.State, evt);
	}
	public CustomerState GetNextState(CustomerState currentState, IStateChangeEvent evt)
	{
		var candidateTransitions = Transitions.Where(
			t => t.ForTransitionType(evt)
			&& t.Start.Equals(currentState)
			&& t.MatchCondition(this, evt)).ToList();
		if (!candidateTransitions.Any())
			throw new Exception("Invalid state transition from `CustomerView` for event ` evt.GetType().Name`");
		if (candidateTransitions.Count() > 1)
			throw new MultipleStateMatchesException($"Multiple possible state transitions found while attempting to apply '{evt.GetType().Name}' to a subject with state `{this.State}`. ", candidateTransitions.Select(transition => transition.ToString()).ToArray());
		return candidateTransitions.Single().End;
	}
}
